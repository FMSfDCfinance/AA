<!DOCTYPE html>
<html lang="en">
<head>
<!-- Smartsupp Live Chat script -->
<script type="text/javascript">
var _smartsupp = _smartsupp || {};
_smartsupp.key = '4202b683f9b10c1842c5f4abd61f0096c7bc0dee';
window.smartsupp||(function(d) {
	var s,c,o=smartsupp=function(){ o._.push(arguments)};o._=[];
	s=d.getElementsByTagName('script')[0];c=d.createElement('script');
	c.type='text/javascript';c.charset='utf-8';c.async=true;
	c.src='https://www.smartsuppchat.com/loader.js?';s.parentNode.insertBefore(c,s);
})(document);
</script>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Investment Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet" />
<style>
:root {
  --bg-primary: #f9fafb;
  --bg-secondary: #ffffff;
  --bg-accent: #1d4ed8;
  --text-main: #111827;
  --text-muted: #6b7280;
  --text-placeholder: #9ca3af;

  --radius: 12px;
  --transition: all 0.3s ease-in-out;
}

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: 'Inter', sans-serif;
  background-color: var(--bg-primary);
  color: var(--text-main);
  min-height: 100vh;
  overflow-x: hidden;
}

header {
  background-color: var(--bg-secondary);
  border-bottom: 1px solid #e5e7eb;
  padding: 0.75rem 1rem;
}

.back-button {
  background: transparent;
  color: var(--text-main);
  padding: 0.4rem 1rem;
  font-size: 0.875rem;
  border: 1px solid #cbd5e1;
  border-radius: 6px;
  text-decoration: none;
  cursor: pointer;
  transition: var(--transition);
}

.back-button:hover {
  background: var(--bg-accent);
  color: #fff;
  border-color: var(--bg-accent);
}

.breadcrumb {
  padding: 1rem 1.5rem;
  font-size: 0.9rem;
  color: var(--text-muted);
}

.card {
  background: var(--bg-secondary);
  border-radius: var(--radius);
  margin: 1rem 1.5rem;
  padding: 1.5rem;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
  transition: var(--transition);
}

.card:hover {
  transform: translateY(-3px);
  box-shadow: 0 12px 28px rgba(0, 0, 0, 0.15);
}

.card-header {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 1rem;
}

.card-header img {
  width: 20px;
  height: 20px;
}

.card-title {
  font-size: 1rem;
  font-weight: 600;
  color: var(--text-main);
}

.card-balance {
  font-size: 1.75rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: space-between;
  color: var(--text-main);
}

.refresh-icon {
  width: 20px;
  height: 20px;
  fill: var(--text-muted);
  cursor: pointer;
  transition: var(--transition);
}

.refresh-icon:hover {
  transform: rotate(90deg) scale(1.1);
  fill: var(--bg-accent);
}

.card-footer {
  margin-top: 1rem;
  font-size: 0.85rem;
  color: var(--text-muted);
}

.section {
  margin: 1rem 1.5rem;
}

.square-box {
  background: var(--bg-secondary);
  border-radius: 10px;
  width: 100px;
  height: 100px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-bottom: 1rem;
  transition: var(--transition);
}

.square-box:hover {
  background: #e5e7eb;
  transform: scale(1.05);
}

.square-box img {
  width: 40px;
  height: 40px;
  margin-bottom: 0.3rem;
}

.square-label {
  font-size: 0.8rem;
  color: var(--text-muted);
}

.wallet-card {
  background: var(--bg-secondary);
  border-radius: var(--radius);
  padding: 1.25rem;
  text-align: center;
  cursor: pointer;
  border: 1px dashed var(--text-muted);
  transition: var(--transition);
}

.wallet-card:hover {
  background: #f3f4f6;
  border-color: var(--bg-accent);
  transform: scale(1.02);
}

.wallet-plus {
  font-size: 2.2rem;
  color: var(--text-muted);
  transition: var(--transition);
}

.wallet-card:hover .wallet-plus {
  color: var(--bg-accent);
}

.wallet-label {
  font-size: 0.85rem;
  color: var(--text-muted);
  margin-top: 0.4rem;
}

.crypto-form {
  background: var(--bg-secondary);
  border-radius: var(--radius);
  display: none;
  flex-direction: column;
  gap: 1rem;
  padding: 1rem;
  opacity: 0;
  transform: translateY(10px);
  animation: slideIn 0.5s ease-out forwards;
}

@keyframes slideIn {
  to {
    display: flex;
    opacity: 1;
    transform: translateY(0);
  }
}

select,
input[type="text"],
input[type="number"] {
  padding: 0.6rem;
  border-radius: 6px;
  border: 1px solid #d1d5db;
  background-color: var(--bg-secondary);
  color: var(--text-main);
  font-size: 1rem;
  width: 100%;
  transition: var(--transition);
}

input:focus,
select:focus {
  outline: none;
  border-color: var(--bg-accent);
  background-color: #f9fafb;
}

.crypto-form button,
.withdraw-button {
  background-color: var(--bg-accent);
  color: white;
  font-weight: 600;
  border: none;
  padding: 0.75rem;
  border-radius: 6px;
  cursor: pointer;
  transition: var(--transition);
}

.crypto-form button:hover,
.withdraw-button:hover {
  background-color: #1e40af;
  transform: scale(1.02);
  box-shadow: 0 0 8px #1e40af;
}

.saved-wallet {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  background: var(--bg-secondary);
  border-radius: var(--radius);
  transition: var(--transition);
}

.saved-wallet:hover {
  background-color: #f3f4f6;
}

.saved-wallet img {
  width: 32px;
  height: 32px;
}

.saved-wallet-info {
  display: flex;
  flex-direction: column;
  color: var(--text-muted);
}

.saved-wallet-info .wallet-address-full {
  display: block;
  word-break: break-word;
  font-size: 0.9rem;
  color: var(--text-main);
}

.long-card {
  display: flex;
  align-items: center;
  gap: 1rem;
  background: var(--bg-secondary);
  border-radius: var(--radius);
  padding: 1rem;
  margin: 1rem 1.5rem;
  transition: var(--transition);
}

.long-card:hover {
  background: #f3f4f6;
}

.long-card img {
  width: 24px;
  height: 24px;
}

.long-card-text {
  font-size: 1rem;
  font-weight: 500;
  color: var(--text-main);
}

.input-group {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin: 1.5rem;
}

.input-wrapper {
  position: relative;
}

.input-wrapper span {
  position: absolute;
  left: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  color: var(--text-placeholder);
}

.input-wrapper input {
  padding-left: 2rem;
}

.withdrawable-label {
  font-size: 0.85rem;
  color: var(--text-muted);
}

.withdraw-section {
  text-align: center;
  margin: 2rem 1.5rem;
}

@media (max-width: 480px) {
  .card,
  .section,
  .input-group {
    margin: 1rem;
    padding: 1rem;
  }
}
</style>
</head>

<body>
  <header>
    <a href="javascript:history.back()" class="back-button">‚Üê Back</a>
  </header>

  <div class="breadcrumb">Home / Withdraw</div>

  <section class="card">
    <div class="card-header">
      <img src="balance-e39ce400.png" alt="Balance Icon">
      <span class="card-title">Available Balance</span>
    </div>
    <div class="card-balance">
      <span id="balanceDisplay">$0.00</span>
      <svg class="refresh-icon" id="refreshIcon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path d="M17.65 6.35A7.95 7.95 0 0 0 12 4V1L7 6l5 5V7c2.76 0 5 2.24 5 5s-2.24 5-5 5a5 5 0 0 1-4.9-4H5a7 7 0 0 0 7 7c3.87 0 7-3.13 7-7 0-1.85-.76-3.53-2.35-4.65z"/>
      </svg>
    </div>
    <div class="card-footer">**** ****</div>
  </section>

  <section class="section">
    <div class="square-box">
      <img src="WithBeforeImgIcon2_20231216164532fy7l.png" alt="Crypto Wallet">
      <div class="square-label">Crypto Wallet</div>
    </div>

    <div class="wallet-card" id="walletCard" onclick="showForm()">
      <div class="wallet-plus">+</div>
      <div class="wallet-label">Add address</div>
    </div>

    <div class="crypto-form" id="cryptoForm" style="display: none; flex-direction: column; gap: 10px;">
      <select id="cryptoSelect" onchange="updateRates()">
        <option value="">Select Cryptocurrency</option>
        <option value="tether">USDT</option>
        <option value="bitcoin">BTC</option>
        <option value="ethereum">ETH</option>
        <option value="solana">SOL</option>
      </select>
      <input type="text" id="walletAddress" placeholder="Enter wallet address" />
      <button onclick="saveWallet()">Save Wallet</button>
    </div>

    <div id="savedWalletContainer"></div>
  </section>

  <section class="long-card">
    <img src="WithBeforeImgIcon_202312161645314vxj (1).png" alt="Crypto">
    <div class="long-card-text">Select amount of</div>
  </section>

  <section class="input-group">
    <div class="input-wrapper">
      <span>$</span>
      <input type="number" id="amount" step="0.01" placeholder="Enter amount in USD" oninput="updateCryptoEquivalent()" />
    </div>
    <input type="text" id="cryptoEquivalent" placeholder="Equivalent in crypto" readonly />
    <div class="withdrawable-label" id="withdrawableLabel">Withdraw balance $0.00</div>
  </section>

  <section class="withdraw-section">
    <button class="withdraw-button" id="withdrawBtn">Withdraw</button>
  </section>

<div id="receipt" style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:#fff; color:#000; padding:20px 30px; border-radius:8px; box-shadow:0 0 20px rgba(0,0,0,0.2); text-align:center; z-index:1000;">
  <h3>Withdrawal Submitted</h3>
  <p id="receiptAmount"></p>
  <p id="receiptWallet"></p>
  <p id="receiptTime"></p>
  <p>Status: <strong>Pending</strong></p>
</div>

<!-- Confirm Modal -->
<div id="confirmModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.6); z-index:999;">
  <div style="background:#fff; padding:20px 30px; border-radius:8px; width:90%; max-width:400px; margin:100px auto; text-align:center;">
    <h2>Confirm Withdrawal</h2>
    <p id="confirmAmount"></p>
    <p id="confirmWallet"></p>
    <p id="confirmCrypto"></p>
    <div style="margin-top:20px;">
      <button id="confirmYes">Continue</button>
      <button id="confirmNo">Cancel</button>
    </div>
  </div>
</div>
  <div id="toast" style="display:none; position:fixed; bottom:20px; left:50%; transform:translateX(-50%); background:#333; color:#fff; padding:10px 20px; border-radius:5px;"></div>

  <!-- Firebase & Script -->
  <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.6.10/firebase-firestore-compat.js"></script>

  <script>
const firebaseConfig = {
  apiKey: "AIzaSyD1nlcsxR7SkaB4hPVLcehdjV1bQPUXV5I",
  authDomain: "stoctmartket-en.firebaseapp.com", // Assuming this typo is intentional and matches your actual Firebase project ID
  projectId: "stoctmartket-en",
  storageBucket: "stoctmartket-en.appspot.com", // FIXED: Correct Firebase storage bucket domain
  messagingSenderId: "925990118609",
  appId: "1:925990118609:web:77bdfd4c16bc584070d1f0"
};

    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    let userId = null;
    const balanceDisplay = document.getElementById('balanceDisplay');
    const withdrawableLabel = document.getElementById('withdrawableLabel');

    const cryptoData = {
      tether: { name: 'USDT', logo: 'https://assets.coingecko.com/coins/images/325/large/Tether.png' },
      bitcoin: { name: 'Bitcoin', logo: 'https://assets.coingecko.com/coins/images/1/large/bitcoin.png' },
      ethereum: { name: 'Ethereum', logo: 'https://assets.coingecko.com/coins/images/279/large/ethereum.png' },
      solana: { name: 'Solana', logo: 'https://assets.coingecko.com/coins/images/4128/large/solana.png' }
    };

    let usdRates = {};

    function listenToBalance() {
      if (!userId) return;
      db.collection('users').doc(userId).onSnapshot((doc) => {
        if (doc.exists) {
          const data = doc.data();
          const bal = data.balance || 0;
          const formatted = bal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
balanceDisplay.textContent = `$${formatted}`;
withdrawableLabel.textContent = `Withdraw balance $${formatted}`;
        }
      });
    }

    async function refreshBalance() {
      if (!userId) return;
      try {
        const doc = await db.collection('users').doc(userId).get();
        if (doc.exists) {
          const data = doc.data();
          const bal = data.balance || 0;
          const formatted = bal.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
balanceDisplay.textContent = `$${formatted}`;
withdrawableLabel.textContent = `Withdraw balance $${formatted}`;
          showToast("Balance refreshed");
        }
      } catch (err) {
        console.error("Error refreshing balance", err);
        showToast("Error refreshing balance");
      }
    }

    document.getElementById("refreshIcon").addEventListener("click", refreshBalance);

    function showForm() {
      document.getElementById('cryptoForm').style.display = 'flex';
      document.getElementById('walletCard').style.display = 'none';
    }

    async function saveWallet() {
      const key = document.getElementById('cryptoSelect').value;
      const address = document.getElementById('walletAddress').value.trim();
      if (!key || !address) {
        alert("Please select a crypto and enter address.");
        return;
      }

      try {
        const { name, logo } = cryptoData[key];

        await db.collection('users').doc(userId).update({
          wallet: {
            key,
            address
          }
        });

        renderSavedWallet({ key, address });
        document.getElementById('cryptoForm').style.display = 'none';
        updateRates();
      } catch (err) {
        console.error("Error saving wallet", err);
        showToast("Failed to save wallet address");
      }
    }

    function renderSavedWallet({ key, address }) {
      const container = document.getElementById('savedWalletContainer');
      const { name, logo } = cryptoData[key];
      container.innerHTML = `
        <div class="saved-wallet" style="display:flex; align-items:center; gap:10px; margin-top:10px;">
          <img src="${logo}" alt="${name}" style="width:30px;height:30px;" />
          <div class="saved-wallet-info">
            <strong>${name}</strong><br>
            <span class="wallet-address-full">${address}</span>
          </div>
        </div>
      `;
      document.getElementById('walletCard').style.display = 'none';
      document.getElementById('cryptoForm').style.display = 'none';
    }

    async function updateRates() {
      const key = document.getElementById('cryptoSelect').value;
      if (!key) return;

      try {
        const resp = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${key}&vs_currencies=usd`);
        const data = await resp.json();
        usdRates[key] = data[key].usd;
        document.querySelector('.long-card-text').textContent = `Select amount of ${cryptoData[key].name}`;
        updateCryptoEquivalent();
      } catch (err) {
        console.error('Error loading rates', err);
        showToast('Failed to fetch crypto rates');
      }
    }

    function updateCryptoEquivalent() {
      const amount = parseFloat(document.getElementById("amount").value);
      const key = document.getElementById("cryptoSelect").value;
      const display = document.getElementById("cryptoEquivalent");

      if (!key || isNaN(amount) || amount <= 0 || !usdRates[key]) {
        display.value = "";
        return;
      }

      const cryptoAmt = amount / usdRates[key];
      display.value = `${cryptoAmt.toFixed(6)} ${cryptoData[key].name}`;
    }

    function showToast(msg) {
      const toast = document.getElementById("toast");
      toast.textContent = msg;
      toast.style.display = "block";
      setTimeout(() => {
        toast.style.display = "none";
      }, 3000);
    }

    document.getElementById('withdrawBtn').addEventListener('click', async () => {
      const amountInput = document.getElementById('amount');
      const withdrawAmount = parseFloat(amountInput.value);
      if (!userId) {
        showToast("User not authenticated");
        return;
      }
      if (isNaN(withdrawAmount) || withdrawAmount < 5000) {
  showToast("Minimum withdrawal amount is $5,000");
  return;
}

      try {
        const userRef = db.collection('users').doc(userId);
        const userSnap = await userRef.get();
        if (!userSnap.exists) {
          showToast("User data not found");
          return;
        }

        const userData = userSnap.data();
        const currentBalance = userData.balance || 0;

        if (withdrawAmount > currentBalance) {
          showToast("Insufficient balance");
          return;
        }

        // Deduct from balance
        const newBalance = currentBalance - withdrawAmount;
        await userRef.update({ balance: newBalance });

        // Record withdrawal request
        await db.collection('withdrawals').add({
          userId: userId,
          amount: withdrawAmount,
          crypto: document.getElementById('cryptoSelect').value || null,
          address: document.getElementById('walletAddress').value || null,
          timestamp: firebase.firestore.FieldValue.serverTimestamp(),
          status: "pending"
        });

        const formattedAmount = withdrawAmount.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
document.getElementById('receiptAmount').textContent = `Amount: $${formattedAmount}`;
const userSnapAfter = await db.collection('users').doc(userId).get();
const wallet = userSnapAfter.data().wallet || {};
document.getElementById('receiptWallet').textContent = `Wallet: ${wallet.address || "N/A"}`;
document.getElementById('receiptTime').textContent = `Time: ${new Date().toLocaleString()}`;
document.getElementById('receipt').style.display = 'block';

setTimeout(() => {
  document.getElementById('receipt').style.display = 'none';
}, 5000);

amountInput.value = '';
document.getElementById('cryptoEquivalent').value = '';
        document.getElementById('cryptoEquivalent').value = '';
      } catch (err) {
        console.error("Withdrawal error", err);
        showToast("Withdrawal failed");
      }
    });

    auth.onAuthStateChanged(async user => {
      if (user) {
        userId = user.uid;
        listenToBalance();

        try {
          const doc = await db.collection('users').doc(userId).get();
          if (doc.exists) {
            const data = doc.data();
            if (data.wallet && data.wallet.address && data.wallet.key) {
              renderSavedWallet(data.wallet);
              document.getElementById("cryptoSelect").value = data.wallet.key;
              updateRates();
            } else {
              document.getElementById('walletCard').style.display = 'flex';
            }
          }
        } catch (err) {
          console.error("Error fetching wallet", err);
        }
      } else {
        console.warn("User not logged in");
      }
    });
  </script>
</body>