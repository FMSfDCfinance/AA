<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Admin Investment Dashboard</title>

  <!-- ============ CORE + COMPACT CARD STYLES ============ -->
  <style>
    /* ─── page ─────────────────────────────────────────── */
    body{
      margin:0;background:#f1f3f5;color:#cbd5e1;
      font-family:"Segoe UI",Tahoma,Geneva,Verdana,sans-serif;
      font-size:16px;line-height:1.6;-webkit-font-smoothing:antialiased;
    }
    .container{max-width:900px;margin:20px auto;padding:16px;}
    h1{color:#3b82f6;text-align:center;font-size:24px;margin-top:20px;}
    #status-text{text-align:center;margin:10px 0 20px;font-size:14px;color:#94a3b8;}
    .cards-container{padding:0 10px;}

    /* ─── compact investment card ─────────────────────── */
    .investment-card{
      background:#1e293b;border-radius:12px;padding:12px 16px;
      margin-bottom:12px;box-shadow:0 4px 12px rgba(0,0,0,.4);
      display:grid;grid-template-columns:1fr auto;gap:10px;align-items:center;
      transition:background .3s ease;
    }
    .investment-card:hover{background:#273449;}

    .card-main{display:flex;flex-direction:column;gap:4px;font-size:14px;}
    .card-main .email{font-weight:600;color:#f1f5f9;}
    .card-main .details{color:#94a3b8;font-size:13px;}

    .card-actions{display:flex;flex-direction:column;align-items:flex-end;gap:6px;}

    select.status-select{
      background:#0f172a;border:1px solid #3b82f6;border-radius:8px;
      color:#f8fafc;padding:6px 10px;font-size:13px;font-weight:500;
      appearance:none;min-width:100px;cursor:pointer;
    }

    .badge{
      padding:4px 10px;border-radius:999px;font-weight:600;font-size:12px;
      text-transform:capitalize;text-align:center;display:inline-block;
    }
    .badge.active{background:#22c55e;}
    .badge.pending{background:#facc15;color:#0f172a;}
    .badge.failed{background:#ef4444;}
    .badge.completed{background:#3b82f6;}
    .badge.na{background:#64748b;color:#0f172a;}

    /* ─── responsiveness ──────────────────────────────── */
    @media(max-width:768px){
      h1{font-size:22px;}
      .investment-card{padding:12px;}
    }
    @media(max-width:480px){
      body{font-size:15px;}
      select.status-select{font-size:14px;}
    }

    /* ─── modal styles (unchanged) ────────────────────── */
    .modal-backdrop{
      position:fixed;inset:0;display:flex;align-items:center;justify-content:center;
      background:rgba(0,0,0,.65);z-index:9999;opacity:0;pointer-events:none;
      transition:opacity .3s ease;
    }
    .modal-backdrop.active{opacity:1;pointer-events:auto;}

    .modal{
      background:#1f2a4a;border-radius:14px;padding:24px;width:90%;max-width:400px;
      box-shadow:0 10px 30px rgba(0,0,0,.5);transform:translateY(-20px);opacity:0;
      transition:all .3s ease;color:#cbd5e1;text-align:center;
    }
    .modal-backdrop.active .modal{transform:translateY(0);opacity:1;}
    .modal h2{margin-bottom:12px;font-size:20px;color:#60a5fa;}
    .modal p{margin-bottom:18px;font-size:15px;}
    .modal input{
      width:100%;padding:10px;margin-bottom:18px;background:#0f172a;
      border:1px solid #3b82f6;color:#fff;border-radius:8px;
    }
    .modal button{
      margin:4px;padding:10px 16px;border:none;border-radius:8px;font-weight:bold;
      cursor:pointer;transition:background .25s ease;
    }
    .modal .primary{background:#3b82f6;color:#fff;}
    .modal .cancel{background:#475569;color:#fff;}
    .modal .primary:hover{background:#60a5fa;}
    .modal .cancel:hover{background:#64748b;}
  </style>
</head>

<body>
<!-- ================================ -->
<!-- ✦ Admin Welcome Box (Isolated) ✦ -->
<!-- ================================ -->

<div class="admin-welcome-box">
  <div class="admin-welcome-content">
    <svg class="admin-welcome-icon" xmlns="http://www.w3.org/2000/svg" fill="none"
      viewBox="0 0 24 24" stroke="#3b82f6">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    <div class="admin-welcome-text">
      <h2>Welcome Admin</h2>
    </div>
  </div>
</div>

<style>
  .admin-welcome-box {
    flex: 1;
    background-color: #0f172a;
    padding: 24px;
    border-radius: 20px;
    border: 1px solid #1e293b;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
    color: #e2e8f0;
    width: 100%;
    max-width: 1000px;
    height: 120px;
    margin-bottom: 30px;
    box-sizing: border-box;
    display: flex;
    align-items: center;
  }

  .admin-welcome-content {
    display: flex;
    align-items: center;
    gap: 16px;
  }

  .admin-welcome-icon {
    width: 40px;
    height: 40px;
    stroke-width: 2.2;
    flex-shrink: 0;
  }

  .admin-welcome-text h2 {
    margin: 0;
    font-size: 18px;
    color: #3b82f6;
  }

  @media (max-width: 600px) {
    .admin-welcome-box {
      padding: 16px;
      height: auto;
    }

    .admin-welcome-content {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }

    .admin-welcome-icon {
      width: 36px;
      height: 36px;
    }

    .admin-welcome-text h2 {
      font-size: 16px;
    }
  }
</style>
  <div class="container">
    <h1>Admin Investment Dashboard</h1>
    <p id="status-text">Loading investments...</p>
    <div class="cards-container" id="cards-container"></div>
  </div>

  <!-- modal backdrop -->
  <div id="modal-backdrop" class="modal-backdrop"></div>

  <!-- ============ DASHBOARD SCRIPT ============ -->
  <script type="module">
    /*── 1. Firebase init ───────────────────────────────────────────*/
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
    import {
      getFirestore, collection, query, onSnapshot,
      updateDoc, doc, where, getDocs
    } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-firestore.js";

    const firebaseConfig = {
  apiKey: "AIzaSyD1nlcsxR7SkaB4hPVLcehdjV1bQPUXV5I",
  authDomain: "stoctmartket-en.firebaseapp.com", // Assuming this typo is intentional and matches your actual Firebase project ID
  projectId: "stoctmartket-en",
  storageBucket: "stoctmartket-en.appspot.com", // FIXED: Correct Firebase storage bucket domain
  messagingSenderId: "925990118609",
  appId: "1:925990118609:web:77bdfd4c16bc584070d1f0"
};
    const app = initializeApp(firebaseConfig);
    const db  = getFirestore(app);

    /*── 2. DOM refs & helpers ─────────────────────────────────────*/
    const cardsContainer = document.getElementById("cards-container");
    const statusText     = document.getElementById("status-text");
    const modalBackdrop  = document.getElementById("modal-backdrop");

    // animated modal (returns Promise)
    function showModal({title="",message="",placeholder="",isPrompt=false,confirmText="OK",cancelText="Cancel"}){
      return new Promise(res=>{
        const modal=document.createElement("div");
        modal.className="modal";
        modal.innerHTML=`
          <h2>${title}</h2>
          <p>${message}</p>
          ${isPrompt?`<input type="password" id="modal-input" placeholder="${placeholder}" />`:""}
          <div>
            <button class="primary" id="modal-confirm">${confirmText}</button>
            ${cancelText?`<button class="cancel" id="modal-cancel">${cancelText}</button>`:""}
          </div>
        `;
        modalBackdrop.innerHTML="";modalBackdrop.appendChild(modal);
        requestAnimationFrame(()=>modalBackdrop.classList.add("active"));

        const cleanup=v=>{
          modalBackdrop.classList.remove("active");
          setTimeout(()=>{modalBackdrop.innerHTML="";res(v);},300);
        };
        modal.querySelector("#modal-confirm").onclick=()=>{
          const val=isPrompt?modal.querySelector("#modal-input").value:true;
          cleanup(val);
        };
        const cancel=modal.querySelector("#modal-cancel");
        if(cancel) cancel.onclick=()=>cleanup(false);
      });
    }

    const formatDate = ts => ts?.seconds ? new Date(ts.seconds*1000).toLocaleString() : "N/A";
    const createBadge = s => `<span class="badge ${["pending","completed","failed","active"].includes(s)?s:"na"}">${s}</span>`;

    /*── 3. Firestore update helper ───────────────────────────────*/
    async function updateInvestmentStatus(id,email,oldStatus,newStatus,expectedReturn){
      if(oldStatus===newStatus) return;
      statusText.textContent=`Updating investment ${id} status…`;
      try{
        await updateDoc(doc(db,"investments",id),{status:newStatus});

        if(["completed","failed"].includes(newStatus) && email){
          const uSnap = await getDocs(query(collection(db,"users"),where("email","==",email)));
          if(uSnap.empty){statusText.textContent=`⚠️ User ${email} not found!`;return;}
          const uDoc = uSnap.docs[0];
          const earned = typeof uDoc.data().earned==="number" ? uDoc.data().earned : 0;
          let credit = 0;
          if(newStatus==="completed" && typeof expectedReturn==="number") credit = expectedReturn;
          if(newStatus==="failed"){
            const invSnap = await getDocs(query(collection(db,"investments"),where("__name__","==",id)));
            credit = typeof invSnap.docs[0]?.data().amount==="number" ? invSnap.docs[0].data().amount : 0;
          }
          await updateDoc(uDoc.ref,{earned:earned+credit});
          statusText.textContent=`Investment ${id} → ${newStatus}. $${credit.toFixed(2)} added to earned.`;
        }else{
          statusText.textContent=`Investment ${id} status updated to ${newStatus}.`;
        }
      }catch(e){console.error(e);statusText.textContent="❌ Update failed. See console.";}
    }

    /*── 4. Card renderer ─────────────────────────────────────────*/
    function renderInvestmentCard(docSnap){
      const d  = docSnap.data(); const id = docSnap.id;
      const email = d.email || "N/A";
      const amountDisp = typeof d.amount==="number" ? `$${d.amount.toFixed(2)}` : (d.amount??"N/A");
      const expReturn  = typeof d.expectedReturn==="number" ? d.expectedReturn : null;
      const expDisp    = expReturn!==null ? `$${expReturn.toFixed(2)}` : "N/A";
      let   status     = (d.status||"na").toLowerCase();
      const plan       = d.plan || "N/A";

      const statusOptions = ["pending","completed","failed","active"].map(s=>
        `<option value="${s}" ${s===status?"selected":""}>${s.charAt(0).toUpperCase()+s.slice(1)}</option>`
      ).join("");

      const card = document.createElement("div");
      card.className="investment-card";
      card.innerHTML=`
        <div class="card-main">
          <div class="email">${email}</div>
          <div class="details">${amountDisp} • ${plan} • ${formatDate(d.timestamp)}</div>
          <div class="details">Return: ${expDisp}</div>
        </div>
        <div class="card-actions">
          <select class="status-select">${statusOptions}</select>
          ${createBadge(status)}
        </div>
      `;

      const select = card.querySelector("select.status-select");
      select.addEventListener("change",async e=>{
        const newStatus = e.target.value;

        // password gate if already finalised
        if(["completed","failed"].includes(status)){
          const pwd = await showModal({
            title:"Admin Password",
            message:`Investment is <b>${status}</b>. Enter password to change.`,
            placeholder:"Password",
            isPrompt:true,
            confirmText:"Verify",
            cancelText:"Cancel"
          });
          if(pwd!=="2025"){
            await showModal({title:"Access denied",message:"Incorrect password.",confirmText:"Dismiss",cancelText:""});
            select.value = status;
            return;
          }
        }

        const ok = await showModal({
          title:"Confirm Change",
          message:`Change status from <b>${status}</b> → <b>${newStatus}</b>?`,
          confirmText:"Yes, update",
          cancelText:"No"
        });
        if(!ok){select.value=status;return;}

        await updateInvestmentStatus(id,email,status,newStatus,expReturn);
        card.querySelector(".badge").className="badge "+newStatus;
        card.querySelector(".badge").textContent=newStatus;
        status=newStatus;
      });

      return card;
    }

    /*── 5. Live snapshot listener ───────────────────────────────*/
    onSnapshot(collection(db,"investments"),snap=>{
      cardsContainer.innerHTML="";
      if(snap.empty){
        cardsContainer.innerHTML='<p style="text-align:center;color:#f87171;">No investments found.</p>';
        statusText.textContent="No investments found.";
        return;
      }
      statusText.textContent=`Loaded ${snap.size} investment${snap.size>1?"s":""}.`;
      snap.docs
        .sort((a,b)=>(b.data().timestamp?.seconds||0)-(a.data().timestamp?.seconds||0))
        .forEach(doc=>cardsContainer.appendChild(renderInvestmentCard(doc)));
    },err=>{
      console.error(err);
      statusText.textContent="Error loading investments. See console.";
    });
  </script>
</body>
</html>