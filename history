<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Transaction History - Titanium FX Wallet</title>

  <!-- Smartsupp Live Chat script -->
<script type="text/javascript">
var _smartsupp = _smartsupp || {};
_smartsupp.key = '4202b683f9b10c1842c5f4abd61f0096c7bc0dee';
window.smartsupp||(function(d) {
	var s,c,o=smartsupp=function(){ o._.push(arguments)};o._=[];
	s=d.getElementsByTagName('script')[0];c=d.createElement('script');
	c.type='text/javascript';c.charset='utf-8';c.async=true;
	c.src='https://www.smartsuppchat.com/loader.js?';s.parentNode.insertBefore(c,s);
})(document);
</script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
  body {
    margin: 0;
    padding: 0;
    font-family: 'Inter', sans-serif;
    background-color: #f8f9fa; /* Light background */
    color: #212529;            /* Dark text */
    min-height: 100vh;
  }

  header {
    display: flex;
    align-items: center;
    padding: 0.75rem 1rem;
    background-color: #ffffff;         /* White header */
    border-bottom: 1px solid #dee2e6;  /* Light gray border */
  }

  .back-button {
    background-color: #e9ecef;  /* Light gray */
    color: #212529;             /* Dark text */
    border: none;
    padding: 0.4rem 0.9rem;
    font-size: 0.85rem;
    border-radius: 5px;
    cursor: pointer;
    font-weight: 500;
  }

  .back-button:hover {
    background-color: #dee2e6; /* Slightly darker on hover */
  }

  .breadcrumb {
    padding: 1rem 1.5rem;
    font-size: 0.9rem;
    color: #6c757d; /* Muted gray */
  }

  .history-container {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .history-container h2 {
    margin-top: 0;
    font-size: 1.25rem;
    color: #212529;
  }

  #balance-summary {
    margin-bottom: 1rem;
    font-size: 1rem;
    color: #495057; /* Slightly muted dark gray */
  }

  #filter-type {
    background-color: #ffffff;
    border: 1px solid #ced4da;
    color: #212529;
    padding: 0.5rem;
    border-radius: 6px;
    margin-bottom: 0.5rem;
  }

  .toggle-btn {
    background-color: #e9ecef;
    color: #212529;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    margin-bottom: 1rem;
  }

  .toggle-btn:hover {
    background-color: #dee2e6;
  }

  .transaction, .investment {
    background-color: #ffffff;
    padding: 1rem;
    border-radius: 10px;
    margin-bottom: 1rem;
    border: 1px solid #e0e0e0;
  }

  .transaction-type {
    font-weight: bold;
    font-size: 1rem;
    margin-bottom: 0.3rem;
  }

  .transaction-amount {
    font-size: 1.1rem;
    margin-bottom: 0.3rem;
  }

  .transaction-time {
    font-size: 0.85rem;
    color: #6c757d;
  }

  .negative {
    border-left: 4px solid #ef4444;
  }

  .investment {
    border-left: 4px solid #f59e0b;
  }

  .empty-state {
    text-align: center;
    color: #adb5bd;
    margin-top: 2rem;
  }

  .empty-state i {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }

  @media (max-width: 480px) {
    .history-container {
      padding: 1rem;
    }
  }
</style>
</head>
<body>
  <header>
    <a href="javascript:history.back()" class="back-button">‚Üê Back</a>
  </header>

  <div class="breadcrumb">Home / History</div>

  <div class="history-container">
    <h2><i class="fas fa-list-alt"></i> Transaction History</h2>
    <div id="balance-summary"><i class="fas fa-wallet"></i> Balance: $0.00</div>

    <select id="filter-type" onchange="loadTransactions()">
      <option value="all">All Transactions</option>
      <option value="transaction">Deposits</option>
      <option value="withdrawal">Withdrawals</option>
      <option value="investment">Investments</option>
    </select>

    <button class="toggle-btn" onclick="toggleSort()">Sort: <span id="sort-label">Newest</span></button>

    <div id="history-list">
      <div class="empty-state" id="no-transactions" style="display: none;">
        <i class="fas fa-file-invoice-dollar"></i><br>
        No transactions found.<br>
        Make a deposit, withdrawal, or investment to get started.
      </div>
    </div>
  </div>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-app.js";
    import { getFirestore, collection, query, where, orderBy, getDocs } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-firestore.js";
    import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.8.1/firebase-auth.js";

    const firebaseConfig = {
  apiKey: "AIzaSyD1nlcsxR7SkaB4hPVLcehdjV1bQPUXV5I",
  authDomain: "stoctmartket-en.firebaseapp.com", // Assuming this typo is intentional and matches your actual Firebase project ID
  projectId: "stoctmartket-en",
  storageBucket: "stoctmartket-en.appspot.com", // FIXED: Correct Firebase storage bucket domain
  messagingSenderId: "925990118609",
  appId: "1:925990118609:web:77bdfd4c16bc584070d1f0"
};

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth();
    let currentSort = "desc";

    function toggleSort() {
      currentSort = currentSort === "desc" ? "asc" : "desc";
      document.getElementById("sort-label").innerText = currentSort === "desc" ? "Newest" : "Oldest";
      loadTransactions();
    }

    function formatDate(timestamp) {
      const date = timestamp.toDate();
      return date.toLocaleString();
    }

    async function loadTransactions() {
      const historyList = document.getElementById("history-list");
      const noTransactions = document.getElementById("no-transactions");
      const filter = document.getElementById("filter-type")?.value || "all";
      const balanceEl = document.getElementById("balance-summary");

      historyList.innerHTML = "";
      let balance = 0;

      onAuthStateChanged(auth, async (user) => {
        if (!user) {
          historyList.innerHTML = `<div class="empty-state"><i class="fas fa-lock"></i><br>Please log in to view your transaction history.</div>`;
          return;
        }

        try {
          const transactionsRef = collection(db, "users", user.uid, "transactions");
          const withdrawalsRef = collection(db, "users", user.uid, "withdrawals");
          const investmentsRef = query(collection(db, "investments"), where("uid", "==", user.uid), orderBy("startDate", currentSort));

          const [transSnap, withdrawSnap, investSnap] = await Promise.all([
            getDocs(query(transactionsRef, orderBy("timestamp", currentSort))),
            getDocs(query(withdrawalsRef, orderBy("timestamp", currentSort))),
            getDocs(investmentsRef)
          ]);

          let combined = [];
          transSnap.forEach(doc => combined.push({ id: doc.id, ...doc.data(), source: "transaction" }));
          withdrawSnap.forEach(doc => combined.push({ id: doc.id, ...doc.data(), source: "withdrawal" }));
          investSnap.forEach(doc => combined.push({ id: doc.id, ...doc.data(), source: "investment" }));

          combined = combined.filter(tx => filter === "all" || tx.source === filter);

          combined.sort((a, b) => {
            const tA = a.timestamp?.toMillis?.() || a.startDate?.toMillis?.() || 0;
            const tB = b.timestamp?.toMillis?.() || b.startDate?.toMillis?.() || 0;
            return currentSort === "desc" ? tB - tA : tA - tB;
          });

          if (combined.length === 0) {
            noTransactions.style.display = "block";
            balanceEl.innerHTML = `<i class="fas fa-wallet"></i> Balance: $0.00`;
            return;
          }

          noTransactions.style.display = "none";

          combined.forEach(tx => {
            let displayType = "";
            let amount = 0;
            let cssClass = "transaction";

            if (tx.source === "withdrawal") {
              displayType = "Withdraw";
              amount = Number(tx.amountUSD) || 0;
              cssClass += " negative";
              balance -= amount;
            } else if (tx.source === "transaction") {
              displayType = "Deposit";
              amount = Number(tx.amount) || 0;
              balance += amount;
            } else if (tx.source === "investment") {
              displayType = "Investment";
              amount = Number(tx.amount) || 0;
              cssClass = "investment";
              balance -= amount;
            }

            const txTime = tx.timestamp || tx.startDate;
            const statusLabel = tx.source === "withdrawal"
              ? (tx.status === "approved"
                ? '<span style="background:#d1fae5;color:#065f46;padding:2px 6px;border-radius:6px;font-size:12px;">Successful</span>'
                : '<span style="background:#e5e7eb;color:#374151;padding:2px 6px;border-radius:6px;font-size:12px;">Pending</span>')
              : "";

            const div = document.createElement("div");
            div.className = cssClass;
            div.innerHTML = `
              <div class="transaction-type">${displayType} ${statusLabel}</div>
              <div class="transaction-amount">$${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</div>
              <div class="transaction-time">${txTime ? formatDate(txTime) : "Pending..."}</div>
              <div style="font-size:13px;color:#94a3b8;">${tx.note || tx.plan || ""}</div>
            `;
            historyList.appendChild(div);
          });

          balanceEl.innerHTML = `<i class="fas fa-wallet"></i> Balance: $${balance.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
        } catch (error) {
          console.error("Error loading transactions:", error.message, error.stack);
          alert("Error: " + error.message);
          historyList.innerHTML = `<div class="empty-state"><i class="fas fa-exclamation-triangle"></i><br>Failed to load data. Try again later.</div>`;
        }
      });
    }

    loadTransactions();
  </script>
</body>
</html>